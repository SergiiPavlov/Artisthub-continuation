/* Chat Friend + Wake Word + AI
   - –ì–æ–≤–æ—Ä–∏—Ç/—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –¥–µ—Ä–≥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è assistant:* –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
   - –î–ª—è AI –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä –Ω–∞ VITE_API_URL (–∏–ª–∏ http://localhost:8787 –≤ dev)
*/
(() => {
  const hasSR = !!(window.SpeechRecognition || window.webkitSpeechRecognition);
  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;

  // ---------- API base ----------
  const API_BASE =
    (import.meta?.env?.VITE_API_URL && import.meta.env.VITE_API_URL.replace(/\/+$/, '')) ||
    (location.hostname === 'localhost' ? 'http://localhost:8787' : '');

  // ---------- UI ----------
  const root = document.createElement('div');
  root.id = 'assistant-root';
  root.className = 'assistant';
  root.innerHTML = `
    <button class="assistant__toggle" aria-label="–ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç">ü§ñ</button>
    <div class="assistant__panel" hidden>
      <div class="assistant__header">
        <strong>–ß–∞—Ç-–¥—Ä—É–≥</strong>
        <div class="assistant__hdr-actions">
          <span class="assistant__badge" title="–°–≤—è–∑—å —Å AI">${API_BASE ? 'AI' : 'OFF'}</span>
          <button class="assistant__gear" aria-label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">‚öôÔ∏è</button>
          <button class="assistant__close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">‚úï</button>
        </div>
      </div>

      <div class="assistant__log" id="assistantLog"></div>

      <div class="assistant__controls">
        ${hasSR ? '<button class="assistant__mic" aria-label="–ì–æ–ª–æ—Å">üé§</button>' : ''}
        <input class="assistant__input" type="text" placeholder="–°–∫–∞–∂–∏ –∞–±–æ –Ω–∞–ø–∏—à–∏‚Ä¶"/>
        <button class="assistant__send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>

      <div class="assistant__settings" hidden>
        <label class="assistant__row">
          <span>–ì–æ–ª–æ—Å –æ–∑–≤—É—á–∫–∏</span>
          <select id="as-voice"></select>
        </label>
        <label class="assistant__row">
          <span>–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—Ä–∞–∑–æ–π</span>
          <input id="as-wake" type="checkbox" />
          <small class="assistant__hint">–§—Ä–∞–∑—ã: ¬´–ø—Ä–∏–≤—ñ—Ç –∞—Ä—Ç–∏—Å—Ç¬ª, ¬´–ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥¬ª, ¬´hey assistant¬ª</small>
        </label>
        <div class="assistant__row">
          <button id="as-test-voice" type="button">–ü—Ä–æ–±–∞ –≥–æ–ª–æ—Å–∞</button>
          <button id="as-clear-log" type="button">–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç</button>
        </div>
      </div>
    </div>
  `;
  document.body.appendChild(root);

  const panel   = root.querySelector('.assistant__panel');
  const btnOpen = root.querySelector('.assistant__toggle');
  const btnClose= root.querySelector('.assistant__close');
  const btnGear = root.querySelector('.assistant__gear');
  const logEl   = root.querySelector('#assistantLog');
  const inputEl = root.querySelector('.assistant__input');
  const btnSend = root.querySelector('.assistant__send');
  const btnMic  = root.querySelector('.assistant__mic');
  const settings= root.querySelector('.assistant__settings');
  const selVoice= root.querySelector('#as-voice');
  const chkWake = root.querySelector('#as-wake');
  const btnTest = root.querySelector('#as-test-voice');
  const btnClr  = root.querySelector('#as-clear-log');

  // ---------- state ----------
  const state = {
    listening: false,
    srCmd: null,         // SR –¥–ª—è ¬´–∫–æ–º–∞–Ω–¥—ã¬ª
    srWake: null,        // SR –¥–ª—è ¬´–∞–∫—Ç–∏–≤–∞—Ü–∏–∏¬ª
    wakeEnabled: localStorage.getItem('assistant.wake') === '1',
    voiceName: localStorage.getItem('assistant.voice') || ''
  };

  // ---------- speech synthesis ----------
  function speak(text) {
    try {
      if (!('speechSynthesis' in window)) return;
      const u = new SpeechSynthesisUtterance(text);
      if (state.voiceName) {
        const v = window.speechSynthesis.getVoices().find(v => v.name === state.voiceName);
        if (v) u.voice = v;
      } else {
        const lang = (navigator.language || '').toLowerCase();
        u.lang = lang.startsWith('uk') ? 'uk-UA' : lang.startsWith('ru') ? 'ru-RU' : 'en-US';
      }
      u.rate = 1; u.pitch = 1;
      window.speechSynthesis.speak(u);
    } catch (e) {
      console.warn('speak failed', e);
    }
  }

  function populateVoices() {
    try {
      const voices = window.speechSynthesis.getVoices();
      selVoice.innerHTML = `<option value="">–°–∏—Å—Ç–µ–º–Ω—ã–π</option>` +
        voices.map(v => `<option value="${v.name}">${v.name} ‚Äî ${v.lang}</option>`).join('');
      if (state.voiceName) selVoice.value = state.voiceName;
    } catch {}
  }
  if ('speechSynthesis' in window) {
    window.speechSynthesis.onvoiceschanged = populateVoices;
    // ¬´–ü—Ä–æ–≥—Ä–µ–≤¬ª TTS –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const arm = () => { document.removeEventListener('pointerdown', arm, true); try { populateVoices(); speak(''); } catch {} };
    document.addEventListener('pointerdown', arm, true);
    setTimeout(populateVoices, 400);
  }

  // ---------- helpers ----------
  function log(text, who = 'bot') {
    const item = document.createElement('div');
    item.className = `assistant__msg assistant__msg--${who}`;
    item.textContent = text;
    logEl.appendChild(item);
    logEl.scrollTop = logEl.scrollHeight;
  }
  function dispatch(name, detail = {}) {
    document.dispatchEvent(new CustomEvent(`assistant:${name}`, { detail }));
  }
  function setListView(on) {
    document.documentElement.classList.toggle('list-view', !!on);
    dispatch('view', { mode: on ? 'list' : 'grid' });
  }

  // ---------- –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ–ª–ª–±—ç–∫) ----------
  function handleCommandLocal(text) {
    const t = (text || '').toLowerCase();

    if (/(list|—Å–ø–∏—Å–æ–∫|–ª–∏—Å—Ç( ?–≤—å—é)?)/.test(t)) { setListView(true); return '–í–∫–ª—é—á–∞—é —Å–ø–∏—Å–æ–∫'; }
    if (/(grid|—Å–µ—Ç–∫–∞|–∫–∞—Ä—Ç–æ—á–∫)/.test(t))     { setListView(false); return '–í–∫–ª—é—á–∞—é —Å–µ—Ç–∫—É'; }

    if (/(next|—Å–ª–µ–¥)/.test(t))              { dispatch('player-next');  return '–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫'; }
    if (/(prev|–ø—Ä–µ–¥)/.test(t))              { dispatch('player-prev');  return '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫'; }
    if (/(–ø–∞—É–∑–∞|pause|—Å—Ç–æ–ø)/.test(t))       { dispatch('player-pause'); return '–ü–∞—É–∑–∞'; }
    if (/(play|–ø–ª–µ–π|–≤–∫–ª—é—á–∏)/.test(t))       { dispatch('player-play');  return '–ò–≥—Ä–∞—é'; }

    if (/(—Ç–∏—à–µ|quieter|volume down)/.test(t)) { dispatch('volume', { delta: -0.1 }); return '–¢–∏—à–µ'; }
    if (/(–≥—Ä–æ–º—á–µ|louder|volume up)/.test(t))  { dispatch('volume', { delta: +0.1 }); return '–ì—Ä–æ–º—á–µ'; }

    const moods = [
      { re: /(–≤–µ—Å–µ–ª|—Ä–∞–¥—ñ—Å|—Ä–∞–¥–æ—Å—Ç|happy|joy)/, mood: 'happy' },
      { re: /(—Å–ø–æ–∫|calm|chill|relax)/,        mood: 'calm' },
      { re: /(—Å—É–º|sad|minor)/,                mood: 'sad' },
      { re: /(–µ–Ω–µ—Ä–≥|drive|–±–∞–¥—å–æ—Ä|—Ä–æ–∫|rock)/,  mood: 'energetic' }
    ];
    const m = moods.find(m => m.re.test(t));
    if (m) { dispatch('recommend', { mood: m.mood }); return `–ü—ñ–¥–±–∏—Ä–∞—é –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π: ${m.mood}`; }

    const g = t.match(/–∂–∞–Ω—Ä\s*([a-z–∞-—è—ë—ñ—ó—î-]+)/i);
    if (g && g[1]) { dispatch('recommend', { genre: g[1] }); return `–ñ–∞–Ω—Ä: ${g[1]}`; }

    const like = t.match(/(—Ö–æ—á—É|–∑–Ω–∞–π–¥–∏|–Ω–∞–π–¥–∏)\s+(.+)/i);
    if (like && like[2]) { dispatch('recommend', { like: like[2].trim() }); return `–®—É–∫–∞—é: ${like[2].trim()}`; }

    return '–Ø –∑–¥–µ—Å—å. –ú–æ–≥—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤–∏–¥, —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–∫–æ–º –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é.';
  }

function runActions(actions = []) {
  for (const a of actions) {
    if (a.type === 'player' && a.action) {
      dispatch('player-' + a.action);
    } else if (a.type === 'view' && a.mode) {
      dispatch('view', { mode: a.mode });
    } else if (a.type === 'recommend') {
      dispatch('recommend', a);
    } else if (a.type === 'volume') {
      dispatch('volume', a);
    } else if (a.type === 'play') {
      // –Ω–æ–≤–æ–µ: —Ç–æ—á–µ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ id/—Å—Ç—Ä–æ–∫–µ
      if (a.id) dispatch('play', { id: a.id });
      else if (a.query) dispatch('play-query', { query: a.query });
    }
  }
}

  // ---------- AI –≤—ã–∑–æ–≤ ----------
  async function callAI(message) {
    if (!API_BASE) return null;
    const r = await fetch(`${API_BASE}/api/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message })
    });
    if (!r.ok) throw new Error(`API ${r.status}`);
    return r.json(); // { reply, explain?, actions? }
  }

  async function handleUserText(text) {
    const v = String(text || '').trim();
    if (!v) return;
    log(v, 'user');

    try {
      const data = await callAI(v);
      if (data && data.reply) {
        log(data.reply, 'bot');
        speak(data.reply);
        runActions(data.actions);
        if (data.explain) log('[' + data.explain + ']', 'note');
        return;
      }
    } catch (e) {
      console.warn('AI API error', e);
    }

    // –§–æ–ª–ª–±—ç–∫
    const reply = handleCommandLocal(v);
    log(reply, 'bot');
    speak(reply);
  }

  // ---------- SR (mic) ----------
  function startCommandSR() {
    if (!hasSR) return;
    stopCommandSR();

    const rec = new SR();
    state.srCmd = rec;
    rec.lang = (navigator.language || 'ru-RU');
    rec.interimResults = false;
    rec.maxAlternatives = 1;

    rec.onresult = ev => {
      const text = ev.results?.[0]?.[0]?.transcript || '';
      if (text) handleUserText(text);
    };
    rec.onerror = e => { console.warn('SR cmd error', e?.error || e); };
    rec.onend = () => { state.listening = false; btnMic?.classList.remove('is-on'); };

    try { rec.start(); state.listening = true; btnMic?.classList.add('is-on'); }
    catch (e) { console.warn('SR start failed', e); }
  }
  function stopCommandSR() {
    try { state.srCmd?.stop?.(); } catch {}
    state.srCmd = null;
  }

  // ---------- Wake word ----------
  const wakePatterns = [
    /–ø—Ä–∏–≤(–µ|—ñ)—Ç\s+(–¥—Ä—É–≥|–∞—Ä—Ç–∏—Å—Ç|–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)/i,
    /–ø—Ä–∏–≤(–µ|—ñ)—Ç/i,
    /hey\s+(assistant|buddy|artist)/i,
    /ok\s+(assistant|buddy|artist)/i
  ];
  function matchesWake(text) { return wakePatterns.some(re => re.test(text || '')); }

  function startWakeSR() {
    if (!hasSR || state.srWake) return;
    const rec = new SR();
    state.srWake = rec;
    rec.lang = (navigator.language || 'ru-RU');
    rec.interimResults = true;
    rec.continuous = true;
    rec.maxAlternatives = 1;

    rec.onresult = (ev) => {
      const res = ev.results[ev.results.length - 1];
      const text = res[0]?.transcript || '';
      if (matchesWake(text)) {
        log('–°–ª—É—à–∞—é‚Ä¶', 'bot'); speak('–°–ª—É—à–∞—é');
        try { state.srWake.stop(); } catch {}
        state.srWake = null;
        startCommandSR();
        const back = () => { if (state.wakeEnabled) startWakeSR(); document.removeEventListener('assistant:cmd-done', back); };
        document.addEventListener('assistant:cmd-done', back);
      }
    };
    rec.onerror = e => { console.warn('SR wake error', e?.error || e); };
    rec.onend   = () => { if (state.wakeEnabled) setTimeout(() => { try { startWakeSR(); } catch {} }, 200); };

    try { rec.start(); } catch (e) { console.warn('wake start failed', e); }
  }
  function stopWakeSR() { try { state.srWake?.stop?.(); } catch {}; state.srWake = null; }

  // ---------- wiring ----------
  function sendText() {
    const v = inputEl.value.trim();
    if (!v) return;
    inputEl.value = '';
    handleUserText(v);
    document.dispatchEvent(new CustomEvent('assistant:cmd-done'));
  }

  btnOpen.addEventListener('click', () => { panel.hidden = !panel.hidden; });
  btnClose.addEventListener('click', () => { panel.hidden = true; });
  btnGear.addEventListener('click', () => { settings.hidden = !settings.hidden; });
  btnSend.addEventListener('click', sendText);
  inputEl.addEventListener('keydown', (e) => { if (e.key === 'Enter') sendText(); });

  if (btnMic && hasSR) {
    btnMic.addEventListener('click', () => {
      if (state.listening) { stopCommandSR(); return; }
      startCommandSR();
    });
  }

  selVoice?.addEventListener('change', () => {
    state.voiceName = selVoice.value || '';
    localStorage.setItem('assistant.voice', state.voiceName);
    speak('–ì–æ–ª–æ—Å –≤—ã–±—Ä–∞–Ω');
  });
  btnTest?.addEventListener('click', () => speak('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –¥—Ä—É–≥.'));
  btnClr?.addEventListener('click', () => { logEl.innerHTML = ''; });

  chkWake?.addEventListener('change', () => {
    state.wakeEnabled = chkWake.checked;
    localStorage.setItem('assistant.wake', state.wakeEnabled ? '1' : '0');
    if (state.wakeEnabled) {
      // –æ–¥–∏–Ω —Ç–∏—Ö–∏–π –∑–∞–ø—É—Å–∫, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –¥–∞–ª –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      if (!state.listening && hasSR) {
        try { startCommandSR(); setTimeout(() => { stopCommandSR(); startWakeSR(); }, 350); } catch {}
      } else {
        startWakeSR();
      }
      log('–ì–æ—Ä—è—á–∞—è —Ñ—Ä–∞–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞. –°–∫–∞–∂–∏: ¬´–ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥¬ª.', 'bot');
    } else {
      stopWakeSR(); stopCommandSR();
      log('–ì–æ—Ä—è—á–∞—è —Ñ—Ä–∞–∑–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.', 'bot');
    }
  });

  // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (chkWake) chkWake.checked = state.wakeEnabled;
  if (state.wakeEnabled) {
    const arm = () => { document.removeEventListener('pointerdown', arm, true);
      try { startCommandSR(); setTimeout(() => { stopCommandSR(); startWakeSR(); }, 350); } catch {}
    };
    document.addEventListener('pointerdown', arm, true);
  }
})();
