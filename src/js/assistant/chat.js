/* Chat Friend + Wake Word (Web Speech) v3
   - –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –ò–õ–ò –ø–æ —Ñ—Ä–∞–∑–µ-–∞–∫—Ç–∏–≤–∞—Ç–æ—Ä—É (–ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)
   - –∫–æ–º–∞–Ω–¥—ã: play/–ø–∞—É–∑–∞/—Å–ª–µ–¥/–ø—Ä–µ–¥/–≥—Ä–æ–º—á–µ/—Ç–∏—à–µ/–ª–∏—Å—Ç/—Å–µ—Ç–∫–∞/–º–∏–∫—Å —Ä–∞–¥–∏–æ/–∂–∞–Ω—Ä/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Ç.–¥.
   - —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –º–æ—Å—Ç–æ–º assistant/bridge.js (–≥–µ–Ω–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è assistant:*)

   –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤:
   - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –í–°–ï–ì–î–ê —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∂–µ—Å—Ç (–∫–ª–∏–∫).
   - –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–≤–∏–¥–∏–º–∞, Chrome –º–æ–∂–µ—Ç ¬´–ø—Ä–∏—Ç—É—à–∏—Ç—å¬ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ.
*/

(() => {
  const hasSR = !!(window.SpeechRecognition || window.webkitSpeechRecognition);
  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;

  // ---------- UI ----------
  const root = document.createElement('div');
  root.id = 'assistant-root';
  root.className = 'assistant';
  root.innerHTML = `
    <button class="assistant__toggle" aria-label="–ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç">ü§ñ</button>
    <div class="assistant__panel" hidden>
      <div class="assistant__header">
        <strong>–ß–∞—Ç-–¥—Ä—É–≥</strong>
        <div class="assistant__hdr-actions">
          <button class="assistant__gear" aria-label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">‚öôÔ∏è</button>
          <button class="assistant__close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">‚úï</button>
        </div>
      </div>

      <div class="assistant__log" id="assistantLog"></div>

      <div class="assistant__controls">
        ${hasSR ? '<button class="assistant__mic" aria-label="–ì–æ–ª–æ—Å">üé§</button>' : ''}
        <input class="assistant__input" type="text" placeholder="–°–∫–∞–∂–∏ –∞–±–æ –Ω–∞–ø–∏—à–∏‚Ä¶" />
        <button class="assistant__send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>

      <div class="assistant__settings" hidden>
        <label class="assistant__row">
          <span>–ì–æ–ª–æ—Å –æ–∑–≤—É—á–∫–∏</span>
          <select id="as-voice"></select>
        </label>
        <label class="assistant__row">
          <span>–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—Ä–∞–∑–æ–π</span>
          <input id="as-wake" type="checkbox" />
          <small class="assistant__hint">–§—Ä–∞–∑—ã: ¬´–ø—Ä–∏–≤—ñ—Ç –∞—Ä—Ç–∏—Å—Ç¬ª, ¬´–ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥¬ª, ¬´hey assistant¬ª</small>
        </label>
        <div class="assistant__row">
          <button id="as-test-voice" type="button">–ü—Ä–æ–±–∞ –≥–æ–ª–æ—Å–∞</button>
          <button id="as-clear-log" type="button">–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç</button>
        </div>
      </div>
    </div>
  `;
  document.body.appendChild(root);

  // –∫—Ä–∞—Ç–µ–Ω—å–∫–∏–µ —Å—Ç–∏–ª–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ
  const style = document.createElement('style');
  style.textContent = `
    .assistant__hdr-actions { display:flex; gap:.5rem; margin-left:auto; }
    .assistant__settings { padding:.75rem; border-top:1px solid rgba(255,255,255,.08); }
    .assistant__row { display:flex; align-items:center; gap:.5rem; margin:.5rem 0; }
    .assistant__row > span { min-width: 160px; opacity:.85; }
    .assistant__hint { opacity:.6; }
    .assistant__msg { padding:.5rem .75rem; border-radius:.75rem; margin:.4rem 0; max-width:85%; }
    .assistant__msg--user { background:#233043; color:#e8f1ff; margin-left:auto; }
    .assistant__msg--bot  { background:#1c1f24; color:#dfe6ef; }
  `;
  document.head.appendChild(style);

  const panel   = root.querySelector('.assistant__panel');
  const btnOpen = root.querySelector('.assistant__toggle');
  const btnClose= root.querySelector('.assistant__close');
  const btnGear = root.querySelector('.assistant__gear');
  const logEl   = root.querySelector('#assistantLog');
  const inputEl = root.querySelector('.assistant__input');
  const btnSend = root.querySelector('.assistant__send');
  const btnMic  = root.querySelector('.assistant__mic');
  const settings= root.querySelector('.assistant__settings');
  const selVoice= root.querySelector('#as-voice');
  const chkWake = root.querySelector('#as-wake');
  const btnTest = root.querySelector('#as-test-voice');
  const btnClr  = root.querySelector('#as-clear-log');

  // ---------- state ----------
  const state = {
    listening: false,
    srCmd: null,         // SR –¥–ª—è ¬´–∫–æ–º–∞–Ω–¥—ã¬ª
    srWake: null,        // SR –¥–ª—è ¬´–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—Ä–∞–∑–æ–π¬ª
    wakeEnabled: false,
    voices: [],
    voiceName: localStorage.getItem('assistant.voice') || '',
  };

  // ---------- speech synthesis ----------
  function speak(text) {
    try {
      if (!('speechSynthesis' in window)) return;
      const u = new SpeechSynthesisUtterance(text);
      const lang = navigator.language?.toLowerCase();
      if (state.voiceName) {
        const v = window.speechSynthesis.getVoices().find(v => v.name === state.voiceName);
        if (v) u.voice = v;
      }
      if (!u.voice) {
        u.lang =
          lang?.startsWith('uk') ? 'uk-UA' :
          lang?.startsWith('ru') ? 'ru-RU' : 'en-US';
      }
      u.rate = 1; u.pitch = 1;
      window.speechSynthesis.speak(u);
    } catch (e) {
      console.warn('speak failed', e);
    }
  }

  function populateVoices() {
    try {
      state.voices = window.speechSynthesis.getVoices();
      selVoice.innerHTML = `<option value="">–°–∏—Å—Ç–µ–º–Ω—ã–π</option>` +
        state.voices.map(v => `<option value="${v.name}">${v.name} ‚Äî ${v.lang}</option>`).join('');
      if (state.voiceName) selVoice.value = state.voiceName;
    } catch (e) {
      console.warn('voices failed', e);
    }
  }
  if ('speechSynthesis' in window) {
    window.speechSynthesis.onvoiceschanged = populateVoices;
    populateVoices();
  }

  // ---------- helpers ----------
  function log(text, who = 'bot') {
    const item = document.createElement('div');
    item.className = `assistant__msg assistant__msg--${who}`;
    item.textContent = text;
    logEl.appendChild(item);
    logEl.scrollTop = logEl.scrollHeight;
  }
  function dispatch(name, detail = {}) {
    document.dispatchEvent(new CustomEvent(`assistant:${name}`, { detail }));
  }
  function setListView(on) {
    document.documentElement.classList.toggle('list-view', !!on);
    dispatch('view', { mode: on ? 'list' : 'grid' });
  }

  // ---------- commands ----------
  function handleCommand(text) {
    const t = (text || '').toLowerCase();

    // –≤–∏–¥
    if (/(list|—Å–ø–∏—Å–æ–∫|–ª–∏—Å—Ç( ?–≤—å—é)?)/i.test(t)) { setListView(true); speak('–í–∫–ª—é—á–∞—é —Å–ø–∏—Å–æ–∫'); return log('–í–∫–ª—é—á–∞—é —Å–ø–∏—Å–æ–∫','bot'); }
    if (/(grid|—Å–µ—Ç–∫–∞|–∫–∞—Ä—Ç–æ—á–∫–∏)/i.test(t)) { setListView(false); speak('–í–∫–ª—é—á–∞—é —Å–µ—Ç–∫—É'); return log('–í–∫–ª—é—á–∞—é —Å–µ—Ç–∫—É','bot'); }

    // —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    if (/(—Å–ª–µ–¥|next)/i.test(t)) { dispatch('player-next'); return log('–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫','bot'); }
    if (/(–ø—Ä–µ–¥|prev)/i.test(t)) { dispatch('player-prev'); return log('–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫','bot'); }
    if (/(–ø–∞—É–∑–∞|pause|—Å—Ç–æ–ø)/i.test(t)) { dispatch('player-pause'); return log('–ü–∞—É–∑–∞','bot'); }
    if (/(–ø–ª–µ–π|play|–≤–∫–ª—é—á–∏)/i.test(t)) { dispatch('player-play'); return log('–ò–≥—Ä–∞–µ—Ç','bot'); }

    // –≥—Ä–æ–º–∫–æ—Å—Ç—å
    if (/(—Ç–∏—à–µ|quieter|volume down|–ø–æ–º–µ–Ω—å—à–µ)/i.test(t)) { dispatch('volume', { delta: -0.1 }); return log('–¢–∏—à–µ','bot'); }
    if (/(–≥—Ä–æ–º—á–µ|louder|volume up|–ø–æ–≥—Ä–æ–º—á–µ)/i.test(t)) { dispatch('volume', { delta: +0.1 }); return log('–ì—Ä–æ–º—á–µ','bot'); }

    // –º–∏–∫—Å-—Ä–∞–¥–∏–æ
    if (/(mix ?radio|–º–∏–∫—Å|—Ä–∞–¥–∏–æ|random)/i.test(t)) {
      const btn = document.getElementById('random-radio');
      if (btn) btn.click();
      else dispatch('player-play');
      return log('Mix Radio','bot');
    }

    // –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ / –∂–∞–Ω—Ä / –ø–æ–∏—Å–∫
    const moods = [
      { re: /(–≤–µ—Å–µ–ª|—Ä–∞–¥—ñ—Å|—Ä–∞–¥–æ—Å—Ç|happy|joy)/i, mood: 'happy' },
      { re: /(—Å–ø–æ–∫|calm|chill|relax)/i, mood: 'calm' },
      { re: /(—Å—É–º|sad|minor)/i, mood: 'sad' },
      { re: /(–µ–Ω–µ—Ä–≥|drive|–±–∞–¥—å–æ—Ä|—Ä–æ–∫|rock)/i, mood: 'energetic' }
    ];
    const m = moods.find(m => m.re.test(t));
    if (m) { dispatch('recommend', { mood: m.mood }); log(`–ü—ñ–¥–±–∏—Ä–∞—é –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π: ${m.mood}`,'bot'); speak(`–ü—ñ–¥–±–∏—Ä–∞—é –º—É–∑–∏–∫—É –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π ${m.mood}`); return; }

    const g = t.match(/–∂–∞–Ω—Ä\s*([a-z–∞-—è—ë—ñ—ó—î-]+)/i);
    if (g && g[1]) { dispatch('recommend', { genre: g[1] }); log(`–ñ–∞–Ω—Ä: ${g[1]}`,'bot'); return; }

    // –ª–∞–π–∫/–ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É
    const like = t.match(/(—Ö–æ—á—É|–∑–Ω–∞–π–¥–∏|–Ω–∞–π–¥–∏)\s+(.+)/i);
    if (like && like[2]) { dispatch('recommend', { like: like[2].trim() }); log(`–®—É–∫–∞—é: ${like[2].trim()}`,'bot'); return; }

    log('–Ø –∑–¥–µ—Å—å. –ú–æ–≥—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤–∏–¥, —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–∫–æ–º –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é.','bot');
  }

  // ---------- SR for one-shot command ----------
  function startCommandSR() {
    if (!hasSR) return;
    stopCommandSR();

    const rec = new SR();
    state.srCmd = rec;
    rec.lang = (navigator.language || 'ru-RU');
    rec.interimResults = false;
    rec.maxAlternatives = 1;

    rec.onresult = (ev) => {
      const text = ev.results?.[0]?.[0]?.transcript || '';
      if (text) { log(text, 'user'); handleCommand(text); }
    };
    rec.onerror = (e) => { console.warn('SR cmd error', e?.error || e); };
    rec.onend = () => { state.listening = false; btnMic?.classList.remove('is-on'); };

    try { rec.start(); state.listening = true; btnMic?.classList.add('is-on'); }
    catch (e) { console.warn('SR start failed', e); }
  }
  function stopCommandSR() {
    try { state.srCmd?.stop?.(); } catch (e) { /* noop */ }
    state.srCmd = null;
  }

  // ---------- SR for wake word ----------
  const wakePatterns = [
    /–ø—Ä–∏–≤(–µ|—ñ)—Ç\s+(–¥—Ä—É–≥|–∞—Ä—Ç–∏—Å—Ç|–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)/i,
    /–ø—Ä–∏–≤(–µ|—ñ)—Ç/i,
    /hey\s+(assistant|buddy|artist)/i,
    /ok\s+(assistant|buddy|artist)/i,
  ];

  function matchesWake(text) {
    return wakePatterns.some(re => re.test(text || ''));
  }

  function startWakeSR() {
    if (!hasSR || state.srWake) return;
    const rec = new SR();
    state.srWake = rec;
    rec.lang = (navigator.language || 'ru-RU');
    rec.interimResults = true;
    rec.continuous = true;
    rec.maxAlternatives = 1;

    let lastHeard = '';

    rec.onresult = (ev) => {
      const res = ev.results[ev.results.length - 1];
      const text = res[0]?.transcript || '';
      if (!text) return;
      lastHeard = text;

      if (matchesWake(text)) {
        log('–°–ª—É—à–∞—é‚Ä¶','bot'); speak('–°–ª—É—à–∞—é');
        // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º ¬´cmd¬ª-—Ä–µ–∂–∏–º: –æ–¥–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        try { state.srWake.stop(); } catch (e) { /* ignore */ }
        state.srWake = null;
        startCommandSR();
        // –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ‚Äì —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏–º wake, –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤–∫–ª
        const back = () => { if (state.wakeEnabled) startWakeSR(); document.removeEventListener('assistant:cmd-done', back); };
        document.addEventListener('assistant:cmd-done', back);
      }
    };
    rec.onerror = (e) => { console.warn('SR wake error', e?.error || e); };
    rec.onend = () => {
      // –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ wake
      if (state.wakeEnabled) {
        setTimeout(() => { try { startWakeSR(); } catch (e) {} }, 200);
      }
    };

    try { rec.start(); }
    catch (e) { console.warn('wake start failed', e); }
  }
  function stopWakeSR() {
    try { state.srWake?.stop?.(); } catch (e) { /* noop */ }
    state.srWake = null;
  }

  // ---------- wiring ----------
  function sendText() {
    const v = inputEl.value.trim();
    if (!v) return;
    log(v, 'user');
    inputEl.value = '';
    handleCommand(v);
    // —Å–æ–æ–±—â–∏–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ wake)
    document.dispatchEvent(new CustomEvent('assistant:cmd-done'));
  }

  btnOpen.addEventListener('click', () => { panel.hidden = !panel.hidden; });
  btnClose.addEventListener('click', () => { panel.hidden = true; });
  btnGear.addEventListener('click', () => { settings.hidden = !settings.hidden; });
  btnSend.addEventListener('click', sendText);
  inputEl.addEventListener('keydown', (e) => { if (e.key === 'Enter') sendText(); });

  if (btnMic && hasSR) {
    btnMic.addEventListener('click', () => {
      if (state.listening) { stopCommandSR(); return; }
      startCommandSR(); // –ø–µ—Ä–≤—ã–π –∂–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω
    });
  }

  selVoice?.addEventListener('change', () => {
    state.voiceName = selVoice.value || '';
    localStorage.setItem('assistant.voice', state.voiceName);
    speak('–ì–æ–ª–æ—Å –≤—ã–±—Ä–∞–Ω');
  });
  btnTest?.addEventListener('click', () => speak('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –¥—Ä—É–≥.'));
  btnClr?.addEventListener('click', () => { logEl.innerHTML = ''; });

  chkWake?.addEventListener('change', () => {
    state.wakeEnabled = chkWake.checked;
    localStorage.setItem('assistant.wake', state.wakeEnabled ? '1' : '0');
    if (state.wakeEnabled) {
      // —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –¥–∞–ª –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É, —Å–¥–µ–ª–∞–µ–º –æ–¥–∏–Ω –Ω–µ–º–æ–π –∑–∞–ø—É—Å–∫ SR –∫–æ–º–∞–Ω–¥
      if (!state.listening && hasSR) {
        try { startCommandSR(); setTimeout(() => { stopCommandSR(); startWakeSR(); }, 350); }
        catch (e) { console.warn('prime mic failed', e); }
      } else {
        startWakeSR();
      }
      log('–ì–æ—Ä—è—á–∞—è —Ñ—Ä–∞–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞. –°–∫–∞–∂–∏: ¬´–ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥¬ª.','bot');
    } else {
      stopWakeSR(); stopCommandSR();
      log('–ì–æ—Ä—è—á–∞—è —Ñ—Ä–∞–∑–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.','bot');
    }
  });

  // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  state.wakeEnabled = localStorage.getItem('assistant.wake') === '1';
  if (chkWake) chkWake.checked = state.wakeEnabled;
  if (state.wakeEnabled) {
    // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∂–µ—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const arm = () => { document.removeEventListener('pointerdown', arm, true); try { startCommandSR(); setTimeout(() => { stopCommandSR(); startWakeSR(); }, 350); } catch (e) {} };
    document.addEventListener('pointerdown', arm, true);
  }

})();
