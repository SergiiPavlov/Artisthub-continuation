// Chat Friend + AI bridge with memory + Provider + Optional server TTS (Piper)
// VERSION: chat.js v2.3.1 (server TTS buffered) ‚Äî 2025-09-10
(() => {
  if (window.__ASSISTANT_UI_INIT__) return;
  window.__ASSISTANT_UI_INIT__ = true;

  const API_BASE =
    (import.meta?.env?.VITE_API_URL && import.meta.env.VITE_API_URL.replace(/\/+$/, "")) ||
    (location.hostname === "localhost" ? "http://localhost:8787" : "");

  // --- helpers ---
  function getYouTubeId(urlOrId) {
    if (!urlOrId) return "";
    if (/^[\w-]{11}$/.test(urlOrId)) return urlOrId;
    try {
      const u = new URL(urlOrId, location.href);
      if (/youtu\.be$/i.test(u.hostname)) return u.pathname.slice(1);
      const v = u.searchParams.get("v");
      if (v && /^[\w-]{11}$/.test(v)) return v;
      const m = u.pathname.match(/\/(?:embed|v|shorts)\/([^/?#]+)/i);
      if (m && m[1] && /^[A-Za-z0-9_-]{11}$/.test(m[1])) return m[1];
    } catch {}
    return "";
  }
  const isStr = (v) => typeof v === "string" && v.length > 0;

  // --- UI ---
  const root = document.createElement("div");
  root.id = "assistant-root";
  root.className = "assistant";
  root.innerHTML = `
    <button class="assistant__toggle" aria-label="–ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç">ü§ñ</button>
    <div class="assistant__panel" hidden>
      <div class="assistant__header">
        <strong>–ß–∞—Ç-–¥—Ä—É–≥</strong>
        <div class="assistant__hdr-actions">
          <span class="assistant__ai-badge">${API_BASE ? "AI" : ""}</span>
          <label class="assistant__prov-wrap" title="–†–µ–∂–∏–º –ò–ò">
            <span class="assistant__prov-label">–†–µ–∂–∏–º</span>
            <select id="as-provider">
              <option value="auto">Auto</option>
              <option value="free">Free</option>
              <option value="pro">Pro</option>
            </select>
          </label>
          <button class="assistant__gear" aria-label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">‚öôÔ∏è</button>
          <button class="assistant__close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">‚úï</button>
        </div>
      </div>
      <div class="assistant__log" id="assistantLog"></div>
      <div class="assistant__controls">
        <button class="assistant__mic" aria-label="–ì–æ–ª–æ—Å">üé§</button>
        <input class="assistant__input" type="text" placeholder="–°–∫–∞–∂–∏ –∞–±–æ –Ω–∞–ø–∏—à–∏‚Ä¶"/>
        <button class="assistant__send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>
      <div class="assistant__settings" hidden>
        <label class="assistant__row">
          <span>–ì–æ–ª–æ—Å –æ–∑–≤—É—á–∫–∏</span>
          <select id="as-voice"></select>
        </label>
        <label class="assistant__row">
          <span>–°–µ—Ä–≤–µ—Ä–Ω—ã–π TTS (Piper)</span>
          <input id="as-tts-server" type="checkbox" />
          <small class="assistant__hint">–ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å /api/tts –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò–Ω–∞—á–µ –±—É–¥–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –≥–æ–ª–æ—Å.</small>
        </label>
        <div class="assistant__row">
          <button id="as-test-voice" type="button">–ü—Ä–æ–±–∞ –≥–æ–ª–æ—Å–∞</button>
          <button id="as-clear-log" type="button">–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç</button>
        </div>
        <div class="assistant__row">
          <small class="assistant__hint">
            –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤ Microsoft Edge –¥–æ—Å—Ç—É–ø–Ω—ã –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞ (SpeechSynthesis).
            –ù–∞ Windows –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã ‚Äî –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞.
          </small>
        </div>
      </div>
    </div>`;
  document.body.appendChild(root);

  const style = document.createElement("style");
  style.textContent = `
    .assistant{position:fixed;right:18px;bottom:18px;z-index:9999}
    .assistant__toggle{width:48px;height:48px;border-radius:50%;border:none;background:#0ea5e9;color:#fff;font-size:22px;box-shadow:0 8px 20px rgba(0,0,0,.35);cursor:pointer}
    .assistant__panel{position:fixed;right:18px;bottom:84px;width:min(92vw,520px);max-height:min(80vh,720px);display:flex;flex-direction:column;background:#111418;border:1px solid rgba(255,255,255,.06);border-radius:12px;box-shadow:0 20px 60px rgba(0,0,0,.6);overflow:hidden}
    .assistant__header{display:flex;align-items:center;gap:.75rem;padding:.8rem 1rem;background:linear-gradient(180deg,#121821,#0e1318);border-bottom:1px solid rgba(255,255,255,.06)}
    .assistant__hdr-actions{margin-left:auto;display:flex;gap:.5rem;align-items:center}
    .assistant__ai-badge{font:600 12px; color:#9ae6b4;background:#203021;border:1px solid #2b4a2d;padding:.25rem .4rem;border-radius:6px}
    .assistant__prov-wrap{display:flex;align-items:center;gap:.35rem;color:#cbd5e1}
    .assistant__prov-wrap select{background:#0b0f14;border:1px solid #263142;color:#e8f1ff;border-radius:8px;padding:.2rem .35rem}
    .assistant__close,.assistant__gear{background:none;border:1px solid rgba(255,255,255,.14);color:#cbd5e1;width:32px;height:32px;border-radius:8px;cursor:pointer}
    .assistant__log{padding:10px 12px;overflow:auto;display:flex;flex-direction:column;gap:8px;flex:1;min-height:160px}
    .assistant__msg{padding:.6rem .9rem;border-radius:12px;max-width:85%;white-space:pre-wrap}
    .assistant__msg--user{margin-left:auto;background:#243244;color:#e7f0ff}
    .assistant__msg--bot{background:#171b21;color:#dfe6ef}
    .assistant__msg--note{align-self:center;opacity:.7;font-size:.9em}
    .assistant__controls{display:flex;gap:8px;padding:10px;border-top:1px solid rgba(255,255,255,.08);background:#0f1216}
    .assistant__controls input{flex:1;min-width:0;padding:.65rem .8rem;border-radius:10px;background:#0b0f14;border:1px solid #263142;color:#e8f1ff}
    .assistant__controls button{border-radius:10px;background:#0ea5e9;color:#fff;border:none;padding:.65rem .9rem;cursor:pointer}
    .assistant__mic{background:#1f2836 !important;border:1px solid #2a3a52 !important;color:#cbd5e1 !important}
    .assistant__mic.is-on{outline:2px solid #0ea5e9}
    .assistant__settings{padding:.75rem;border-top:1px solid rgba(255,255,255,.08);background:#0f1216}
    .assistant__row{display:flex;align-items:center;gap:.5rem;margin:.45rem 0}
    .assistant__row > span{min-width:150px;opacity:.85}
    .assistant__hint{opacity:.7}
    #as-voice{flex:1;min-width:0;padding:.45rem .55rem;border-radius:8px;background:#0b0f14;border:1px solid #263142;color:#e8f1ff}
  `;
  document.head.appendChild(style);

  // refs
  const panel    = root.querySelector(".assistant__panel");
  const btnOpen  = root.querySelector(".assistant__toggle");
  const btnClose = root.querySelector(".assistant__close");
  const btnGear  = root.querySelector(".assistant__gear");
  const logEl    = root.querySelector("#assistantLog");
  const inputEl  = root.querySelector(".assistant__input");
  const btnSend  = root.querySelector(".assistant__send");
  const btnMic   = root.querySelector(".assistant__mic");
  const selVoice = root.querySelector("#as-voice");
  const selProv  = root.querySelector("#as-provider");
  const chkTTS   = root.querySelector("#as-tts-server");
  const btnTest  = root.querySelector("#as-test-voice");
  const btnClr   = root.querySelector("#as-clear-log");

  // --- memory (–∫–æ—Ä–æ—Ç–∫–∞—è) ---
  const chat = { history: [], lastIds: [], lastGenre: null, lastMood: null, nowPlaying: null };

  // Now Playing –æ—Ç –ø–ª–µ–µ—Ä–∞
  window.addEventListener("AM.player.track", (e) => {
    const id = e?.detail?.id || "";
    const title = String(e?.detail?.title || "");
    let artist = "", song = "";
    const m = title.split(" - ");
    if (m.length >= 2) { artist = m[0].trim(); song = m.slice(1).join(" - ").trim(); }
    chat.nowPlaying = { id, title, artist, song };
  });

  // --- Provider pref ---
  const provPref = localStorage.getItem('assistant.provider') || 'auto';
  selProv.value = provPref;
  selProv.addEventListener('change', () => {
    localStorage.setItem('assistant.provider', selProv.value);
    addMsg("note", `–†–µ–∂–∏–º: ${selProv.value === 'pro' ? 'Pro (OpenAI)' : selProv.value === 'free' ? 'Free (–ª–æ–∫–∞–ª—å–Ω–æ)' : 'Auto'}`);
  });
  function providerToSend() {
    const p = localStorage.getItem('assistant.provider') || 'auto';
    if (p === 'pro')  return 'openai';
    if (p === 'free') return 'lmstudio';
    return undefined; // auto
  }

  // --- Server TTS pref ---
  chkTTS.checked = localStorage.getItem('assistant.ttsServer') === '1';
  chkTTS.addEventListener('change', () => {
    localStorage.setItem('assistant.ttsServer', chkTTS.checked ? '1' : '0');
    addMsg("note", chkTTS.checked ? '–°–µ—Ä–≤–µ—Ä–Ω—ã–π TTS –≤–∫–ª—é—á—ë–Ω' : '–°–µ—Ä–≤–µ—Ä–Ω—ã–π TTS –≤—ã–∫–ª—é—á–µ–Ω');
  });

  // --- TTS ---
  const tts = { voiceName: localStorage.getItem("assistant.voice") || "" };
  function populateVoices() {
    try {
      const V = window.speechSynthesis?.getVoices?.() || [];
      selVoice.innerHTML =
        `<option value="">–°–∏—Å—Ç–µ–º–Ω—ã–π / –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π</option>` +
        V.map(v => `<option value="${v.name}">${v.name} ‚Äî ${v.lang}</option>`).join("");
      if (tts.voiceName) selVoice.value = tts.voiceName;
    } catch {}
  }
  if ("speechSynthesis" in window) {
    try { window.speechSynthesis.onvoiceschanged = populateVoices; } catch {}
    setTimeout(populateVoices, 300);
  }
  selVoice?.addEventListener("change", () => {
    tts.voiceName = selVoice.value || "";
    localStorage.setItem("assistant.voice", tts.voiceName);
    speak("–ì–æ–ª–æ—Å –≤—ã–±—Ä–∞–Ω");
  });

  // ‚îÄ‚îÄ‚îÄ –ù–û–í–û–ï: –ª—ë–≥–∫–∏–π –¥–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ –¥–ª—è Piper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  function detectLang(text = "") {
    const s = String(text);
    if (/[“ë—î—ñ—ó“ê–Ñ–Ü–á]/.test(s)) return "uk";
    if (/[\u0400-\u04FF]/.test(s)) return "ru";
    return "en";
  }

  // ‚îÄ‚îÄ‚îÄ –ù–û–í–û–ï: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä–Ω—ã–π TTS (–±—É—Ñ–µ—Ä–Ω–∞—è –æ—Ç–¥–∞—á–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  async function speakServer(text, lang) {
    if (!API_BASE) throw new Error('no API');
    const r = await fetch(`${API_BASE}/api/tts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text, lang })
    });
    if (!r.ok) throw new Error(`tts unavailable ${r.status}`);
    // –ñ–î–Å–ú –ü–û–õ–ù–´–ô –ë–£–§–ï–†, –∞ –Ω–µ —Å—Ç—Ä–∏–º–∏–º
    const buf = await r.arrayBuffer();
    const url = URL.createObjectURL(new Blob([buf], { type: 'audio/wav' }));
    const audio = new Audio(url);
    audio.preload = 'auto';
    try { await audio.play(); } catch (e) { console.warn('[tts] play() blocked:', e); }
    audio.onended = () => URL.revokeObjectURL(url);
    audio.onerror = () => console.error('[tts] audio error:', audio.error);
  }

  function speakBrowser(text) {
    try {
      if (!("speechSynthesis" in window)) return;
      const u = new SpeechSynthesisUtterance(text);
      if (tts.voiceName) {
        const v = window.speechSynthesis.getVoices().find(v => v.name === tts.voiceName);
        if (v) u.voice = v;
      } else {
        const lang = (navigator.language || "en-US").toLowerCase();
        u.lang = lang.startsWith("uk") ? "uk-UA" : lang.startsWith("ru") ? "ru-RU" : "en-US";
      }
      u.rate = 1; u.pitch = 1;
      window.speechSynthesis.speak(u);
    } catch {}
  }

  function speak(text) {
    const useServer = chkTTS.checked && !!API_BASE;
    if (useServer) speakServer(text, detectLang(text)).catch(() => speakBrowser(text));
    else speakBrowser(text);
  }

  btnTest?.addEventListener("click", () => speak("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –¥—Ä—É–≥."));
  btnClr?.addEventListener("click", () => { logEl.innerHTML = ""; chat.history = []; });

  // === Sleep timer (helpers) ===
  let sleepTimerId = null;
  function clearSleepTimer() {
    if (sleepTimerId) { clearTimeout(sleepTimerId); sleepTimerId = null; }
  }
  function scheduleSleep(ms) {
    clearSleepTimer();
    sleepTimerId = setTimeout(() => {
      dispatch("player-stop");
      addMsg("note", "‚è∞ –¢–∞–π–º–µ—Ä: —Å—Ç–æ–ø.");
    }, ms);
  }
  function parseSleepDuration(s) {
    const r = /(\d{1,3})\s*(—á–∞—Å(?:–æ–≤|–∞)?|h|hour|hours|–º–∏–Ω(?:—É—Ç[—ã|—É])?|m|min|minutes|—Å–µ–∫(?:—É–Ω–¥[—É—ã])?|s|sec|seconds)/i;
    const m = String(s||'').toLowerCase().match(r);
    if (!m) return null;
    const n = Number(m[1]||0);
    let unit = m[2]||'';
    if (/^—á–∞—Å|h|hour/.test(unit)) return n*60*60*1000;
    if (/^–º–∏–Ω|m|min/.test(unit))  return n*60*1000;
    return n*1000;
  }
  function parseSleepCommand(t) {
    // "–≤—ã–∫–ª—é—á–∏—Å—å —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã", "–æ—Å—Ç–∞–Ω–æ–≤–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫", "stop in 10 min"
    const s = String(t || "").toLowerCase();
    const r = /(–≤—ã–∫–ª—é—á–∏(?:—Å—å)?|–æ—Å—Ç–∞–Ω–æ–≤–∏|stop)\s*(?:—á–µ—Ä–µ–∑|in)?\s*(\d{1,3})\s*(—Å–µ–∫(?:—É–Ω–¥[—É—ã])?|—Å|sec|seconds|–º–∏–Ω(?:—É—Ç[—ã|—É])?|m|min|minutes|—á–∞—Å(?:–æ–≤|–∞)?|h|hour|hours)/i;
    const m = s.match(r);
    if (!m) return null;
    const n = Number(m[2] || 0);
    let unit = m[3] || "";
    let ms = 0;
    if (/^—á–∞—Å|h|hour/.test(unit)) ms = n * 60 * 60 * 1000;
    else if (/^–º–∏–Ω|m|min/.test(unit)) ms = n * 60 * 1000;
    else ms = n * 1000;
    return ms > 0 ? ms : null;
  }
  // –î–æ–ø. –ø–∞—Ä—Å–µ—Ä –¥–ª—è ¬´–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ stop¬ª –æ—Ç –ò–ò
  function parseDelaySpec(text = "") {
    const s = String(text).toLowerCase();
    if (/(–ø–æ—Å–ª–µ\s+(—ç—Ç–æ–π|—Ç–µ–∫—É—â–µ–π)\s+(–ø–µ—Å–Ω–∏|–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏|—Ç—Ä–µ–∫–∞)|after\s+(this|current)\s+(song|track))/.test(s)) {
      return { afterCurrent: true };
    }
    // ¬´—á–µ—Ä–µ–∑ 15 —Å–µ–∫/–º–∏–Ω/—á–∞—Å¬ª –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ ¬´–≤—ã–∫–ª—é—á–∏—Å—å¬ª
    const m = s.match(/—á–µ—Ä–µ–∑\s+(\d{1,3})\s*(—Å–µ–∫(?:—É–Ω–¥[—É—ã])?|—Å|sec|seconds|–º–∏–Ω(?:—É—Ç[—ã|—É])?|m|min|minutes|—á–∞—Å(?:–æ–≤|–∞)?|h|hour|hours)\b/);
    if (m) {
      const n = Number(m[1] || 0);
      const unit = m[2] || "";
      let ms = 0;
      if (/^—á–∞—Å|h|hour/.test(unit)) ms = n * 3600000;
      else if (/^–º–∏–Ω|m|min/.test(unit)) ms = n * 60000;
      else ms = n * 1000;
      if (ms > 0) return { ms };
    }
    return null;
  }

  // ¬´–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏ –≤—ã–∫–ª—é—á–∏—Å—å¬ª
  let sleepAfterTrack = false;
  window.addEventListener("AM.player.ended", () => {
    if (sleepAfterTrack) {
      sleepAfterTrack = false;
      clearSleepTimer();
      dispatch("player-stop");
      addMsg("note", "‚è∞ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.");
    }
  });

  // log/history
  function addMsg(role, content) {
    const cls = role === "user" ? "assistant__msg--user"
      : role === "bot" ? "assistant__msg--bot"
      : "assistant__msg--note";
    const d = document.createElement("div");
    d.className = `assistant__msg ${cls}`;
    d.textContent = String(content || "");
    logEl.appendChild(d);
    logEl.scrollTop = logEl.scrollHeight;

    if (role !== "note") {
      chat.history.push({ role: role === "user" ? "user" : "assistant", content: String(content || "") });
      chat.history = chat.history.slice(-10);
    }
  }

  function dispatch(name, detail = {}) {
    const ev = new CustomEvent(`assistant:${name}`, { detail, bubbles:true, composed:true });
    window.dispatchEvent(ev);
    document.dispatchEvent(new CustomEvent(`assistant:${name}`, { detail, bubbles:true, composed:true }));
  }

  function runActions(actions = []) {
    for (const a of actions) {
      if (a?.type === "player" && a.action) {
        dispatch("player-" + a.action);
      } else if (a?.type === "view" && a.mode) {
        dispatch("view", { mode: a.mode });
      } else if (a?.type === "recommend") {
        dispatch("recommend", a);
        if (a.genre) chat.lastGenre = a.genre;
        if (a.mood)  chat.lastMood  = a.mood;
      } else if (a?.type === "volume") {
        dispatch("volume", a);
      } else if (a?.type === "mixradio") {
        dispatch("mixradio", { start: true });
      } else if (a?.type === "ui" && a.action) {
        if (a.action === "minimize") dispatch("minimize");
        else if (a.action === "expand") dispatch("expand");
      } else if (a?.type === "play" && (a.id || a.query)) {
        dispatch("play", { id: a.id, query: a.query });
        const id = getYouTubeId(a.id || a.query);
        if (id) chat.lastIds = [id];
      }
    }
  }

  function harvestIdsFromReply(txt = "") {
    const ids = new Set();
    const urlRe = /\bhttps?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/shorts\/)([A-Za-z0-9_-]{11})\b/g;
    let m;
    while ((m = urlRe.exec(txt))) ids.add(m[1]);
    const idRe = /\b([A-Za-z0-9_-]{11})\b/g;
    while ((m = idRe.exec(txt))) ids.add(m[1]);
    return Array.from(ids);
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –î–û –ø–æ—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  function tryAdvancedLocalIntents(traw) {
    const text = String(traw||'').toLowerCase();

    // 1) –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è
    const msSleep = parseSleepCommand(text);
    if (msSleep) {
      addMsg("bot", `–û–∫, –≤—ã–∫–ª—é—á—É —á–µ—Ä–µ–∑ ${Math.round(msSleep/1000)} —Å–µ–∫.`);
      speak(`–í—ã–∫–ª—é—á—É —á–µ—Ä–µ–∑ ${Math.round(msSleep/1000)} —Å–µ–∫—É–Ω–¥`);
      scheduleSleep(msSleep);
      return true;
    }

    // 2) –í—ã–∫–ª—é—á–∏—Å—å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏
    if (/(–ø–æ—Å–ª–µ (—ç—Ç–æ–π|—Ç–µ–∫—É—â–µ–π) (–ø–µ—Å–Ω–∏|–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏|—Ç—Ä–µ–∫[–∞–∏])|after this (song|track))/i.test(text)) {
      sleepAfterTrack = true;
      addMsg("bot", "–û–∫, –≤—ã–∫–ª—é—á—É –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.");
      speak("–í—ã–∫–ª—é—á—É –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞");
      clearSleepTimer();
      try { window.__AM_SLEEP_AFTER__ = true; } catch {}
      return true;
    }

    // 3) ¬´—Ö–∏—Ç–æ–≤ —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ 2 —á–∞—Å–∞/30 –º–∏–Ω—É—Ç¬ª
    const reThisArtist = /(—Ö–∏—Ç(?:–æ–≤|—ã)|–ª—É—á—à–∏–µ|best of|hits).*(—ç—Ç–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞).*(\d{1,2}.*(—á–∞—Å|–º–∏–Ω))/i;
    const reNamed = /(—Ö–∏—Ç(?:–æ–≤|—ã)|–ª—É—á—à–∏–µ|best of|hits)\s+([a-z–∞-—è—ë—ñ—ó—î .'\-]+?)\s+(?:–Ω–∞|–≤ —Ç–µ—á–µ–Ω–∏–µ|–Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏)?\s*(\d{1,2}\s*(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω|–º–∏–Ω—É—Ç|minutes?|hours?))/i;

    let artist = "";
    let durStr = "";

    let m = text.match(reThisArtist);
    if (m && chat.nowPlaying?.artist) {
      artist = chat.nowPlaying.artist;
      durStr = m[3] || "";
    } else {
      m = text.match(reNamed);
      if (m) {
        artist = (m[2] || "").trim();
        durStr = m[3] || "";
      }
    }

    if (artist && durStr) {
      const ms = parseSleepDuration(durStr);
      if (ms) {
        const q = `${artist} greatest hits playlist`;
        addMsg("bot", `–û–∫, —Ö–∏—Ç—ã ${artist} ‚Äî –ø–æ–µ—Ö–∞–ª–∏. –í—ã–∫–ª—é—á—É —á–µ—Ä–µ–∑ ${Math.round(ms/60000)} –º–∏–Ω.`);
        speak(`–í–∫–ª—é—á–∞—é —Ö–∏—Ç—ã ${artist}. –í—ã–∫–ª—é—á—É —á–µ—Ä–µ–∑ ${Math.round(ms/60000)} –º–∏–Ω—É—Ç`);
        dispatch("play", { query: q });
        scheduleSleep(ms);
        return true;
      }
    }

    return false;
  }

  // API
  async function callAI(message) {
    if (!API_BASE) return null;
    const r = await fetch(`${API_BASE}/api/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message, history: chat.history, provider: providerToSend() })
    });
    if (!r.ok) throw new Error(`API ${r.status}`);
    return r.json();
  }

  async function handleUserText(text) {
    const v = String(text || "").trim();
    if (!v) return;

    addMsg("user", v);

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è (—Ç–∞–π–º–µ—Ä—ã/—Ö–∏—Ç—ã) ‚Äî –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
    if (tryAdvancedLocalIntents(v)) return;

    // –ü–æ–¥—Å–∫–∞–∑–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª ¬´—á–µ—Ä–µ–∑ ...¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏¬ª,
    // –∞ –ò–ò –≤–µ—Ä–Ω–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π stop ‚Äî –º—ã –µ–≥–æ –ø–æ–¥–∞–≤–∏–º –∏ –ø–æ—Å—Ç–∞–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä.
    const delaySpec = parseDelaySpec(v);
    const suppressImmediateStop = !!(delaySpec && (delaySpec.ms || delaySpec.afterCurrent));

    // 1) –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä –ò–ò
    try {
      const data = await callAI(v);
      if (data && isStr(data.reply)) {
        const harvested = harvestIdsFromReply(data.reply);
        if (harvested.length) chat.lastIds = harvested;

        addMsg("bot", data.reply);
        speak(data.reply);

        let actions = Array.isArray(data.actions) ? data.actions : [];
        if (actions.length) {
          // –ø–æ–¥–∞–≤–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π stop, –µ—Å–ª–∏ –ø—Ä–æ—Å–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É
          if (suppressImmediateStop) {
            actions = actions.filter(a => !(a?.type === 'player' && a.action === 'stop'));
          }
          const aPlay = actions.find(a => a.type === 'play' && (a.id || a.query));
          if (aPlay) {
            const id = getYouTubeId(aPlay.id || aPlay.query);
            if (id) chat.lastIds = [id];
          }
          runActions(actions);

          // –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –µ—Å–ª–∏ –±—ã–ª–∞ –∑–∞–¥–µ—Ä–∂–∫–∞, —Å—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä/—Ñ–ª–∞–≥
          if (delaySpec?.ms) {
            addMsg("note", `‚è∞ –í—ã–∫–ª—é—á—É—Å—å —á–µ—Ä–µ–∑ ~${Math.round(delaySpec.ms/1000)} —Å–µ–∫.`);
            scheduleSleep(delaySpec.ms);
          } else if (delaySpec?.afterCurrent) {
            sleepAfterTrack = true;
            clearSleepTimer();
            addMsg("note", "‚è∞ –í—ã–∫–ª—é—á—É—Å—å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.");
            try { window.__AM_SLEEP_AFTER__ = true; } catch {}
          }
        } else {
          const localReply = handleCommandLocal(v);
          addMsg("note", "[" + localReply + "]");
          if (delaySpec?.ms) scheduleSleep(delaySpec.ms);
          else if (delaySpec?.afterCurrent) {
            sleepAfterTrack = true;
            clearSleepTimer();
            addMsg("note", "‚è∞ –í—ã–∫–ª—é—á—É—Å—å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.");
            try { window.__AM_SLEEP_AFTER__ = true; } catch {}
          }
        }

        if (isStr(data.explain)) addMsg("note", "[" + data.explain + "]");
        return;
      }
    } catch (e) {
      console.warn("AI API error", e);
    }

    // 2) –§–æ–ª–ª–±—ç–∫
    const reply = handleCommandLocal(v);
    addMsg("bot", reply);
    speak(reply);
  }

  // –ü—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–∂–∞–Ω—Ä—ã/–º—É–¥)
  function handleCommandLocal(t) {
    const text = (t || "").toLowerCase();
    const wantsPlay = /–≤–∫–ª—é—á|–ø–æ—Å—Ç–∞–≤—å|play|–∑–∞–ø—É—Å—Ç–∏|–≤—Ä—É–±–∏|—Å—ã–≥—Ä–∞–π/.test(text);

    if (/list|—Å–ø–∏—Å–æ–∫|–ª–∏—Å—Ç ?–≤—å—é/.test(text)) { dispatch("view", { mode: "list" }); return "–í–∫–ª—é—á–∞—é —Å–ø–∏—Å–æ–∫"; }
    if (/grid|—Å–µ—Ç–∫–∞|–∫–∞—Ä—Ç–æ—á–∫/.test(text))   { dispatch("view", { mode: "grid" }); return "–í–∫–ª—é—á–∞—é —Å–µ—Ç–∫—É"; }
    if (/next|—Å–ª–µ–¥/.test(text))            { dispatch("player-next"); return "–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"; }
    if (/prev|–ø—Ä–µ–¥/.test(text))            { dispatch("player-prev"); return "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"; }
    if (/–ø–∞—É–∑–∞|—Å—Ç–æ–ø|pause|–æ—Å—Ç–∞–Ω–æ–≤/.test(text)) { dispatch("player-pause"); dispatch("player-stop"); return "–ü–∞—É–∑–∞"; }

    // –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
    if (/(–æ—Ç–º–µ–Ω–∏|—Å–±—Ä–æ—Å—å|cancel).*(—Ç–∞–π–º–µ—Ä|timer)/.test(text)) { clearSleepTimer(); return "–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω"; }

    // ¬´–¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é / –µ—â—ë¬ª
    if (/(–¥—Ä—É–≥(—É—é|–æ–π)|–µ—â—ë|–µ—â–µ|another)/.test(text)) { dispatch("player-next"); return "–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"; }

    // ¬´–≤–∫–ª—é—á–∏¬ª
    if (/play|–ø–ª–µ–π|–≤–∫–ª—é—á–∏|–≤—Ä—É–±–∏|—Å—ã–≥—Ä–∞–π/.test(text)) {
      if (chat.lastIds.length) dispatch("play", { id: chat.lastIds[0] }); else dispatch("mixradio", { start: true });
      return "–ò–≥—Ä–∞—é";
    }

    if (/—Ç–∏—à–µ|quieter|volume down|–ø–æ–º–µ–Ω—å—à–µ/.test(text)) { dispatch("volume", { delta: -0.1 }); return "–¢–∏—à–µ"; }
    if (/–≥—Ä–æ–º—á–µ|louder|volume up|–ø–æ–≥—Ä–æ–º—á–µ/.test(text))  { dispatch("volume", { delta: +0.1 }); return "–ì—Ä–æ–º—á–µ"; }
    if (/(mix ?radio|–º–∏–∫—Å|—Ä–∞–¥–∏–æ|random)/.test(text))    { dispatch("mixradio", { start: true }); return "Mix Radio"; }

    if (/^(?:–≤–∫–ª—é—á–∏|–ø–æ—Å—Ç–∞–≤—å|–∑–∞–ø—É—Å—Ç–∏|–Ω–∞–π–¥–∏|–∑–Ω–∞–π–¥–∏)\s+.+/i.test(text)) {
      const like = text.replace(/^(?:–≤–∫–ª—é—á–∏|–ø–æ—Å—Ç–∞–≤—å|–∑–∞–ø—É—Å—Ç–∏|–Ω–∞–π–¥–∏|–∑–Ω–∞–π–¥–∏)\s+/i, "").trim();
      if (like) { dispatch("recommend", { like, autoplay: true }); return "–®—É–∫–∞—é —Ç–∞ –≤–º–∏–∫–∞—é‚Ä¶"; }
    }

    const moods = [
      { re: /(–≤–µ—Å–µ–ª|—Ä–∞–¥—ñ—Å|—Ä–∞–¥–æ—Å—Ç|happy|joy)/, mood: "happy" },
      { re: /(—Å–ø–æ–∫|calm|chill|relax)/,        mood: "calm" },
      { re: /(—Å—É–º|sad|minor)/,                mood: "sad" },
      { re: /(–µ–Ω–µ—Ä–≥|drive|–±–∞–¥—å–æ—Ä|—Ä–æ–∫|rock)/,  mood: "energetic" }
    ];
    const m = moods.find(m => m.re.test(text));
    if (m) { dispatch("recommend", { mood: m.mood, autoplay: wantsPlay }); chat.lastMood = m.mood; return wantsPlay ? "–ü—ñ–¥–±–∏—Ä–∞—é —Ç–∞ –≤–º–∏–∫–∞—é‚Ä¶" : "–ü—ñ–¥–±–∏—Ä–∞—é –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π"; }

    const g = text.match(/–∂–∞–Ω—Ä\s*([a-z–∞-—è—ë—ñ—ó—î-]+)/i);
    if (g && g[1]) { dispatch("recommend", { genre: g[1], autoplay: wantsPlay }); chat.lastGenre = g[1]; return wantsPlay ? `–ñ–∞–Ω—Ä ${g[1]}, –∑–∞–ø—É—Å–∫–∞—é‚Ä¶` : `–ñ–∞–Ω—Ä: ${g[1]}`; }

    if (/–∏–∑ (—ç—Ç–æ–≥–æ|—Ç–æ–≥–æ) —Å–ø–∏—Å–∫–∞|–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ|–ª—é–±–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞/.test(text)) {
      if (chat.lastIds.length) { dispatch("play", { id: chat.lastIds[0] }); return "–ó–∞–ø—É—Å–∫–∞—é –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞"; }
      dispatch("mixradio", { start: true }); return "–í–∫–ª—é—á–∞—é –∏–∑ —Å–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π";
    }

    return "–Ø –∑–¥–µ—Å—å. –ú–æ–≥—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤–∏–¥, —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–∫–æ–º –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é.";
  }

  // Mic
  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (btnMic && SR) {
    btnMic.addEventListener("click", () => {
      try {
        const rec = new SR();
        rec.lang = (navigator.language || "ru-RU");
        rec.interimResults = false; rec.maxAlternatives = 1;
        btnMic.classList.add("is-on");
        rec.onresult = ev => {
          const t = ev.results?.[0]?.[0]?.transcript || "";
          handleUserText(t);
        };
        rec.onerror = () => { addMsg("bot","–ù–µ –≤—ã—à–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å"); };
        rec.onend = () => btnMic.classList.remove("is-on");
        rec.start();
      } catch {
        addMsg("bot","–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
      }
    });
  }

  // wiring
  root.querySelector(".assistant__toggle").addEventListener("click", () => { panel.hidden = !panel.hidden; });
  btnClose.addEventListener("click", () => { panel.hidden = true; });
  btnGear.addEventListener("click", () => {
    const s = root.querySelector(".assistant__settings");
    if (s) s.hidden = !s.hidden;
  });
  btnSend.addEventListener("click", () => {
    const t = inputEl.value; inputEl.value = ""; handleUserText(t);
  });
  inputEl.addEventListener("keydown", (e) => {
    if (e.key === "Enter") { const t = inputEl.value; inputEl.value = ""; handleUserText(t); }
  });
})();
