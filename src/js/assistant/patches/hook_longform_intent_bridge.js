/**
 * Hook: Longform Intent Bridge (movies -> suggest, audiobooks keep behavior)
 * Removes short-video yes/no flow. No duplicate "–ü–æ–¥–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã‚Ä¶" messages.
 */
(function longformIntentBridge(){
  const w = window;
  function log(){ try{ console.log.apply(console, ['[bridge]'].concat([].slice.call(arguments))); }catch{} }
  function safe(fn){ try{ return (typeof fn==='function') ? fn.apply(null, Array.prototype.slice.call(arguments,1)) : void 0; }catch{} }

  function detectLongform(raw){
    const v = String(raw||'').toLowerCase();
    if (!v.trim()) return null;
    const isMovie = /(\b—Ñ–∏–ª—å–º\b|\b–∫–∏–Ω–æ\b|–ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂)/i.test(v) || /–¥–ª–∏—Ç–µ–ª—å–Ω\w+\s+(–±–æ–ª–µ–µ\s+)?(—á–∞—Å–∞|60\s*–º–∏–Ω)/i.test(v);
    const isAudiobook = /(–∞—É–¥–∏–æ\s*–∫–Ω–∏–≥\w*|–∞—É–¥–∏–æ–∫–Ω–∏–≥–∞|audiobook)/i.test(v);
    if (!isMovie && !isAudiobook) return null;

    // Extract title
    let title = '';
    const qm = String(raw).match(/["‚Äú‚Äù¬´¬ª‚Äû‚Äü']([^"‚Äú‚Äù¬´¬ª‚Äû‚Äü']{2,})["‚Äú‚Äù¬´¬ª‚Äû‚Äü']/);
    if (qm) title = qm[1].trim();
    if (!title) {
      const m2 = String(raw).match(/(?:—Ñ–∏–ª—å–º(?:—ã)?|–∫–∏–Ω–æ|–∞—É–¥–∏–æ\s*–∫–Ω–∏–≥–∞|–∞—É–¥–∏–æ–∫–Ω–∏–≥–∞|–∫–Ω–∏–≥–∞)\s+([^,;.!?]+)$/i);
      if (m2) {
        let t = m2[1];
        t = t.replace(/\s+—Å\s+.+$/i, "").replace(/\s+with\s+.+$/i, "");
        title = t.trim();
      }
    }
    const type = isAudiobook ? 'audiobook' : 'movie';
    const needSuggest = type === 'movie' ? true : !title;
    return { type, title, needSuggest, limit: 12 };
  }

  try {
    const orig = w.parseIntent;
    if (typeof orig === 'function') {
      w.parseIntent = function bridgedParseIntent(raw){
        const intent = detectLongform(raw);
        if (!intent) return orig.apply(this, arguments);

        log('longform intent', intent);

        if (intent.needSuggest) {
          // üîπ –°–æ–æ–±—â–∞–µ–º chat.js, —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –ò–ò –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –≤–≤–æ–¥–∞
          try { w.__ASSIST_SKIP_AI_ONCE__ = true; } catch {}
          w.dispatchEvent(new CustomEvent('assistant:pro.suggest', { detail: intent }));
          safe(w.addMsg, 'note', '–ü–æ–¥–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã‚Ä¶');
          safe(w.speak, '–ü–æ–¥–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã');
          return;
        }
        // audiobooks with explicit title -> play
        try { w.__ASSIST_SKIP_AI_ONCE__ = true; } catch {}
        w.dispatchEvent(new CustomEvent('assistant:pro.play', { detail: intent }));
        safe(w.addMsg,'note','–ò—â—É –∏ –≤–∫–ª—é—á–∞—é –∞—É–¥–∏–æ–∫–Ω–∏–≥—É‚Ä¶');
        safe(w.speak,'–í–∫–ª—é—á–∞—é –∞—É–¥–∏–æ–∫–Ω–∏–≥—É');
      };
    }
  } catch(err) {
    console.error('[bridge] failed to attach', err);
  }
})();
