// scripts/patch-api-base.mjs
// Патчит фронт на использование API_BASE:
//  1) создаёт/обновляет src/js/assistant/apiBase.js
//  2) во всех src/**/*.js заменяет:
//     - fetch('/api/...')  -> fetch(`${API_BASE}/api/...`)
//     - fetch('/v1/...')   -> fetch(`${API_BASE}/v1/...`)
//     - 'http://localhost:8787/...' -> `${API_BASE}/...`
//  3) добавляет импорт API_BASE в файлы, где он нужен.

import fs from "fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const ROOT = process.cwd();
const SRC_DIR = path.join(ROOT, "src");
const API_BASE_FILE = path.join(SRC_DIR, "js", "assistant", "apiBase.js");

// 1) гарантируем apiBase.js
const apiBaseContent = `// auto-generated by scripts/patch-api-base.mjs
// Выставляет базу API из Vite env или глобала, срезая хвостовые слэши.
export const API_BASE = (
  (typeof import !== 'undefined' && typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.VITE_AI_BASE_URL)
  ?? (typeof window !== 'undefined' ? window.__AI_BASE__ : '')
  ?? ''
) || (typeof location !== 'undefined' ? location.origin : '');
export default API_BASE;
`.replace(/\r\n/g, "\n");

async function ensureApiBaseFile() {
  await fs.mkdir(path.dirname(API_BASE_FILE), { recursive: true });
  let needWrite = true;
  try {
    const cur = await fs.readFile(API_BASE_FILE, "utf8");
    // Перезаписывать не будем, если файл уже похож на наш по сигнатуре
    if (cur.includes("export const API_BASE")) needWrite = false;
  } catch {}
  if (needWrite) {
    await fs.writeFile(API_BASE_FILE, apiBaseContent, "utf8");
    console.log(`[create] ${path.relative(ROOT, API_BASE_FILE)}`);
  } else {
    console.log(`[keep]   ${path.relative(ROOT, API_BASE_FILE)}`);
  }
}

// 2) обход src и правки
async function* walk(dir) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  for (const e of entries) {
    const p = path.join(dir, e.name);
    if (e.isDirectory()) {
      yield* walk(p);
    } else if (e.isFile() && /\.js$/i.test(e.name)) {
      yield p;
    }
  }
}

function injectImport(content, fromPath, toApiBase) {
  // вычисляем относительный путь импорта
  let rel = path.relative(path.dirname(fromPath), toApiBase).replace(/\\/g, "/");
  if (!rel.startsWith(".")) rel = "./" + rel;

  // если импорт уже есть — не добавляем
  const hasImport =
    /from\s+['"].*apiBase\.js['"]/.test(content) ||
    new RegExp(`from\\s+['"]${rel.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}['"]`).test(content);
  if (hasImport) return content;

  // вставляем в начало файла (после возможной директивы "use strict")
  const lines = content.split("\n");
  let idx = 0;
  if (/^\s*['"]use strict['"]\s*;?\s*$/.test(lines[0] || "")) idx = 1;
  lines.splice(idx, 0, `import { API_BASE } from '${rel}';`);
  return lines.join("\n");
}

function patchFetches(text) {
  let out = text;
  // fetch('/api/...') или fetch("/api/..")
  out = out.replace(
    /fetch\((['"])(\/api\/[^'"]*)\1/g,
    (_m, _q, pth) => "fetch(`" + "${API_BASE}" + pth + "`"
  );
  // fetch('/v1/...') или fetch("/v1/..")
  out = out.replace(
    /fetch\((['"])(\/v1\/[^'"]*)\1/g,
    (_m, _q, pth) => "fetch(`" + "${API_BASE}" + pth + "`"
  );
  // 'http://localhost:8787/...' или "http://localhost:8787/..."
  out = out.replace(
    /(['"])http:\/\/localhost:8787(\/[^'"]*)?\1/g,
    (_m, _q, tail = "") => "`" + "${API_BASE}" + (tail || "") + "`"
  );
  return out;
}

async function processFile(p) {
  const rel = path.relative(ROOT, p);
  let text = await fs.readFile(p, "utf8");
  const before = text;

  const hadFetch =
    /fetch\((['"])(\/(?:api|v1)\/[^'"]*)\1/.test(text) ||
    /(['"])http:\/\/localhost:8787/.test(text);

  text = patchFetches(text);
  if (hadFetch) {
    text = injectImport(text, p, API_BASE_FILE);
  }

  if (text !== before) {
    await fs.writeFile(p, text, "utf8");
    console.log(`[patch] ${rel}`);
  }
}

(async () => {
  await ensureApiBaseFile();
  try {
    for await (const f of walk(SRC_DIR)) {
      await processFile(f);
    }
  } catch (e) {
    console.error(e);
    process.exitCode = 1;
  }
})();
